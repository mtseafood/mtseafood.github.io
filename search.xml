<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/software/Docker/</url>
    <content><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>In today’s fast-paced development environment, the need for efficient software deployment and scalability is paramount. Docker has emerged as a groundbreaking technology that allows developers to easily package, deploy, and manage applications in isolated environments known as containers.</p>
<h2 id="What-is-Docker"><a href="#What-is-Docker" class="headerlink" title="What is Docker?"></a>What is Docker?</h2><p>Docker is an open-source platform that automates the deployment of applications inside lightweight, portable containers. Containers are a standardized unit of software that encapsulate an application and all its dependencies, ensuring that it runs seamlessly across different computing environments.</p>
<h2 id="Why-Use-Docker"><a href="#Why-Use-Docker" class="headerlink" title="Why Use Docker?"></a>Why Use Docker?</h2><ol>
<li><p><strong>Portability:</strong> Docker containers can run on any machine that has Docker installed, making it easy to move applications between development, testing, and production environments.</p>
</li>
<li><p><strong>Isolation:</strong> Each Docker container runs in its own isolated environment, allowing developers to avoid conflicts between different software libraries and dependencies.</p>
</li>
<li><p><strong>Scalability:</strong> Docker enables easy scaling of applications by allowing multiple instances of a container to run simultaneously to handle increased loads.</p>
</li>
<li><p><strong>Efficiency:</strong> Containers share the host OS kernel, making them more lightweight than traditional virtual machines, which require a guest OS.</p>
</li>
</ol>
<h2 id="Key-Concepts-in-Docker"><a href="#Key-Concepts-in-Docker" class="headerlink" title="Key Concepts in Docker"></a>Key Concepts in Docker</h2><ol>
<li><p><strong>Images vs. Containers:</strong></p>
<ul>
<li><strong>Image:</strong> A Docker image is a read-only template used to create containers. Images contain the application code, libraries, and environment variables.</li>
<li><strong>Container:</strong> A container is a running instance of an image. It is a lightweight, standalone, executable package that includes everything needed to run a piece of software.</li>
</ul>
</li>
<li><p><strong>Dockerfile:</strong><br>A Dockerfile is a script containing a series of instructions to create a Docker image. It defines everything required to set up an application, including the base image, dependencies, and configuration settings.</p>
</li>
<li><p><strong>Docker Hub:</strong><br>Docker Hub is a cloud-based repository where developers can store and share Docker images. It provides a platform to find pre-built images and collaborate with other developers.</p>
</li>
</ol>
<h2 id="Getting-Started-with-Docker"><a href="#Getting-Started-with-Docker" class="headerlink" title="Getting Started with Docker"></a>Getting Started with Docker</h2><ol>
<li><p><strong>Installation:</strong><br>To start using Docker, you need to install Docker Desktop, which is available for Windows, macOS, and Linux. Follow the official installation instructions <a href="https://docs.docker.com/get-docker/">here</a>.</p>
</li>
<li><p><strong>Creating Your First Container:</strong><br>Use the following command to pull an image and run a simple container:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Building Your Own Image:</strong><br>Create a simple <code>Dockerfile</code> for a FastAPI application:</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;uvicorn&quot;</span>, <span class="string">&quot;app:app&quot;</span>, <span class="string">&quot;--host&quot;</span>, <span class="string">&quot;0.0.0.0&quot;</span>, <span class="string">&quot;--port&quot;</span>, <span class="string">&quot;8000&quot;</span>]</span></span><br></pre></td></tr></table></figure>
<p>In this example, make sure your requirements.txt includes fastapi and uvicorn. Here’s a simple example of what that file might look like:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fastapi</span><br><span class="line">uvicorn</span><br></pre></td></tr></table></figure>

<p>An example app.py file could look like this:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_root</span>():</span><br><span class="line"> <span class="keyword">return</span> &#123;<span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;World&quot;</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>To build an image from this Dockerfile, run:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t myfastapiapp .</span><br></pre></td></tr></table></figure>
</li>
<li><p>Running Your Application:<br>After building your image, you can run your application in a container:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8000:8000 myfastapiapp</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Docker is revolutionizing the way software is developed and deployed by promoting portability, scalability, and efficiency. With its growing ecosystem and robust community support, Docker is becoming a standard tool for developers worldwide. Embracing Docker can significantly enhance your development workflow and lead to more reliable and consistent application deployments.</p>
<h2 id="Further-Reading"><a href="#Further-Reading" class="headerlink" title="Further Reading"></a>Further Reading</h2><p>Official Docker Documentation: <a href="https://docs.docker.com/">Docker Docs</a><br>Explore Docker Compose for multi-container applications: <a href="https://docs.docker.com/compose/">Docker Compose</a></p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>docker, container, software</tag>
      </tags>
  </entry>
  <entry>
    <title>Frist  By Hexo</title>
    <url>/hexo-tutorial/Frist-By-Hexo/</url>
    <content><![CDATA[<p>Hello, world!</p>
]]></content>
      <categories>
        <category>hexo tutorial</category>
      </categories>
  </entry>
  <entry>
    <title>Opentelemetry</title>
    <url>/Opentelemetry/Opentelemetry/</url>
    <content><![CDATA[<h1 id="OpenTelemetry-Logs-Traces-and-Metrics"><a href="#OpenTelemetry-Logs-Traces-and-Metrics" class="headerlink" title="OpenTelemetry: Logs, Traces, and Metrics"></a>OpenTelemetry: Logs, Traces, and Metrics</h1><p>OpenTelemetry is an open-source framework designed to collect, process, and export observability data from applications. It primarily involves three types of data: logs, traces, and metrics. Below is a detailed explanation of each, along with a Python example.</p>
<h2 id="Logging"><a href="#Logging" class="headerlink" title="Logging"></a>Logging</h2><p>Logging captures detailed information about events and messages occurring within your application.</p>
<h3 id="Key-Concepts"><a href="#Key-Concepts" class="headerlink" title="Key Concepts:"></a>Key Concepts:</h3><ul>
<li><strong>Logger</strong>: Used to create and manage log records.</li>
<li><strong>Log Record</strong>: Represents a single log entry.</li>
</ul>
<h3 id="Python-Example"><a href="#Python-Example" class="headerlink" title="Python Example"></a>Python Example</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install opentelemetry-api opentelemetry-sdk</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> opentelemetry <span class="keyword">import</span> logs</span><br><span class="line"><span class="keyword">from</span> opentelemetry.sdk.logs <span class="keyword">import</span> LoggingProvider, ConsoleLogExporter</span><br><span class="line"><span class="keyword">from</span> opentelemetry.sdk.logs.export <span class="keyword">import</span> SimpleLogReader</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up logging</span></span><br><span class="line">logs.set_logger_provider(LoggingProvider())</span><br><span class="line">logger = logs.get_logger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of creating and using logs</span></span><br><span class="line">logger.info(<span class="string">&quot;This is an informational message&quot;</span>)</span><br><span class="line">logger.error(<span class="string">&quot;This is an error message&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Tracing"><a href="#Tracing" class="headerlink" title="Tracing"></a>Tracing</h2><p>Tracing helps track the flow of requests through your services, showing how different parts of your system interact.</p>
<h3 id="Key-Concepts-1"><a href="#Key-Concepts-1" class="headerlink" title="Key Concepts:"></a>Key Concepts:</h3><ul>
<li><strong>Tracer</strong>: Creates and manages spans.</li>
<li><strong>Span</strong>: Represents a single operation within a trace.</li>
<li><strong>Context</strong>: Maintains the state of the current trace</li>
</ul>
<h3 id="Python-Example-1"><a href="#Python-Example-1" class="headerlink" title="Python Example"></a>Python Example</h3><p>Install Required Packages:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install opentelemetry-api opentelemetry-sdk</span><br></pre></td></tr></table></figure>

<p>Basic Tracing Setup:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> opentelemetry <span class="keyword">import</span> trace</span><br><span class="line"><span class="keyword">from</span> opentelemetry.sdk.trace <span class="keyword">import</span> TracerProvider, SpanProcessor</span><br><span class="line"><span class="keyword">from</span> opentelemetry.sdk.trace.export <span class="keyword">import</span> SimpleSpanProcessor, ConsoleSpanExporter</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up the Tracer Provider</span></span><br><span class="line">trace.set_tracer_provider(TracerProvider())</span><br><span class="line">tracer = trace.get_tracer(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up a span processor and exporter</span></span><br><span class="line">span_processor = SimpleSpanProcessor(ConsoleSpanExporter())</span><br><span class="line">trace.get_tracer_provider().add_span_processor(span_processor)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of creating and using spans</span></span><br><span class="line"><span class="keyword">with</span> tracer.start_as_current_span(<span class="string">&quot;example-span&quot;</span>) <span class="keyword">as</span> span:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Tracing something within the span&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Nested span example</span></span><br><span class="line">    <span class="keyword">with</span> tracer.start_as_current_span(<span class="string">&quot;nested-span&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Tracing something within a nested span&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Metrics"><a href="#Metrics" class="headerlink" title="Metrics"></a>Metrics</h2><p>Metrics provide numerical data about the performance and state of your application over time.</p>
<h3 id="Key-Concepts-2"><a href="#Key-Concepts-2" class="headerlink" title="Key Concepts:"></a>Key Concepts:</h3><ul>
<li><strong>Meter</strong>: Used to create and manage metrics.</li>
<li><strong>Counter</strong>: Increases over time, e.g., counting requests.</li>
<li><strong>Histogram</strong>: Records the distribution of values, such as response times.</li>
<li><strong>Gauge</strong>: Records a value that can go up and down, such as active connections.</li>
</ul>
<h3 id="Python-Example-2"><a href="#Python-Example-2" class="headerlink" title="Python Example"></a>Python Example</h3><p>Install Required Packages:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install opentelemetry-api opentelemetry-sdk</span><br></pre></td></tr></table></figure>
<p>Basic Metrics Setup:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> opentelemetry <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">from</span> opentelemetry.sdk.metrics <span class="keyword">import</span> MeterProvider, ConsoleMetricsExporter</span><br><span class="line"><span class="keyword">from</span> opentelemetry.sdk.metrics.export <span class="keyword">import</span> SimpleMetricReader</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up the Meter Provider</span></span><br><span class="line">meter_provider = MeterProvider()</span><br><span class="line">metrics.set_meter_provider(meter_provider)</span><br><span class="line">meter = metrics.get_meter(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up a metric reader and exporter</span></span><br><span class="line">metric_reader = SimpleMetricReader(ConsoleMetricsExporter())</span><br><span class="line">meter_provider.start_pipeline(meter, metric_reader)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example of creating and using metrics</span></span><br><span class="line">counter = meter.create_counter(<span class="string">&quot;example_counter&quot;</span>, description=<span class="string">&quot;Counts things&quot;</span>)</span><br><span class="line">counter.add(<span class="number">1</span>)  <span class="comment"># Increment counter by 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># For histogram example:</span></span><br><span class="line"><span class="keyword">from</span> opentelemetry.sdk.metrics <span class="keyword">import</span> Histogram</span><br><span class="line">histogram = meter.create_histogram(<span class="string">&quot;example_histogram&quot;</span>, description=<span class="string">&quot;Records values&quot;</span>)</span><br><span class="line">histogram.record(<span class="number">5</span>)  <span class="comment"># Record a value of 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gauge example:</span></span><br><span class="line">gauge = meter.create_gauge(<span class="string">&quot;example_gauge&quot;</span>, description=<span class="string">&quot;Records current value&quot;</span>)</span><br><span class="line">gauge.<span class="built_in">set</span>(<span class="number">42</span>)  <span class="comment"># Set gauge to 42</span></span><br></pre></td></tr></table></figure>

<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><ul>
<li><strong>Logs</strong> capture detailed events or messages about what’s happening in your application, often used for debugging.</li>
<li><strong>Traces</strong> track the flow of requests through various services, showing the path and timing of each request.</li>
<li><strong>Metrics</strong> collect numerical data over time, like request counts or error rates, to monitor performance and health.</li>
</ul>
<p>By using OpenTelemetry with Python, you can effectively gather and analyze these three types of observability data, leading to better insights into your application’s performance and behavior.</p>
]]></content>
      <categories>
        <category>Opentelemetry</category>
      </categories>
      <tags>
        <tag>opentelemetry</tag>
        <tag>logs</tag>
        <tag>traces</tag>
        <tag>metrics</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest Extension</title>
    <url>/Pytest/Pytest-Extension/</url>
    <content><![CDATA[<h1 id="pytest-related-Packages"><a href="#pytest-related-Packages" class="headerlink" title="pytest-related Packages"></a>pytest-related Packages</h1><h2 id="pytest-xdist"><a href="#pytest-xdist" class="headerlink" title="pytest-xdist"></a>pytest-xdist</h2><p><code>pytest-xdist</code> is a plugin for pytest that allows you to run your tests in parallel across multiple CPUs or even on remote machines. This can significantly speed up your test execution time, especially for large test suites.</p>
<ul>
<li><strong>Documentation</strong>: <a href="https://pytest-xdist.readthedocs.io/en/latest/">pytest-xdist</a></li>
</ul>
<h2 id="pytest-cov"><a href="#pytest-cov" class="headerlink" title="pytest-cov"></a>pytest-cov</h2><p><code>pytest-cov</code> is a plugin that provides coverage reporting for your tests. It integrates with the coverage.py tool to measure code coverage and generate reports, making it easier to identify untested parts of your codebase.</p>
<ul>
<li><strong>Documentation</strong>: <a href="https://pytest-cov.readthedocs.io/en/latest/">pytest-cov</a></li>
</ul>
<h2 id="pytest-html"><a href="#pytest-html" class="headerlink" title="pytest-html"></a>pytest-html</h2><p><code>pytest-html</code> is a plugin that generates HTML reports for your test runs. This allows you to easily visualize the results of your tests, including detailed information about passed and failed tests, along with logs and screenshots.</p>
<ul>
<li><strong>Documentation</strong>: <a href="https://pytest-html.readthedocs.io/en/latest/">pytest-html</a></li>
</ul>
<h2 id="pytest-sugar"><a href="#pytest-sugar" class="headerlink" title="pytest-sugar"></a>pytest-sugar</h2><p><code>pytest-sugar</code> is a plugin that enhances the default output of pytest by providing a more visually appealing and informative test run report. It adds progress bars, colored output, and additional statistics to improve the overall testing experience.</p>
<ul>
<li><strong>Documentation</strong>: <a href="https://github.com/Frozenball/pytest-sugar">pytest-sugar</a></li>
</ul>
]]></content>
      <categories>
        <category>Pytest</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pytest</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Testing</title>
    <url>/Pytest/Python-Testing/</url>
    <content><![CDATA[<h1 id="A-Beginner’s-Guide-to-Python-Unit-Testing-with-Pytest"><a href="#A-Beginner’s-Guide-to-Python-Unit-Testing-with-Pytest" class="headerlink" title="A Beginner’s Guide to Python Unit Testing with Pytest"></a>A Beginner’s Guide to Python Unit Testing with Pytest</h1><p>Unit testing is an essential practice in software development that helps ensure your code behaves as expected. This guide will introduce you to the basics of unit testing in Python using the <code>pytest</code> framework.</p>
<h2 id="What-is-Unit-Testing"><a href="#What-is-Unit-Testing" class="headerlink" title="What is Unit Testing?"></a>What is Unit Testing?</h2><p>Unit testing involves testing individual components of your code (usually functions or classes) to verify that they work correctly. This practice helps catch bugs early and makes your code more maintainable.</p>
<h2 id="Why-Unit-Test"><a href="#Why-Unit-Test" class="headerlink" title="Why Unit Test?"></a>Why Unit Test?</h2><ul>
<li><strong>Catch Bugs Early</strong>: Identify issues before they become larger problems.</li>
<li><strong>Simplify Integration</strong>: Ensure that each part of your code works independently.</li>
<li><strong>Facilitate Refactoring</strong>: Make changes to your code with confidence that existing functionality is preserved.</li>
<li><strong>Documentation</strong>: Provide examples of how your code is intended to be used.</li>
</ul>
<h2 id="Introducing-Pytest"><a href="#Introducing-Pytest" class="headerlink" title="Introducing Pytest"></a>Introducing Pytest</h2><p><code>pytest</code> is a popular testing framework for Python that makes it easy to write simple and scalable test cases. It offers powerful features like fixtures, parameterized testing, and a rich ecosystem of plugins.</p>
<h3 id="Installing-Pytest"><a href="#Installing-Pytest" class="headerlink" title="Installing Pytest"></a>Installing Pytest</h3><p>To get started with <code>pytest</code>, you need to install it. You can do this using pip:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pytest</span><br></pre></td></tr></table></figure>


<h3 id="Getting-Started-with-Pytest"><a href="#Getting-Started-with-Pytest" class="headerlink" title="Getting Started with Pytest"></a>Getting Started with Pytest</h3><ol>
<li><p>Writing Your First Test<br>Here’s a simple example. Suppose you have a function that adds two numbers:</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># calculator.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure>

<p> Now, let’s write a unit test for this function using pytest:</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test_calculator.py</span></span><br><span class="line"><span class="keyword">from</span> calculator <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add</span>():</span><br><span class="line">    <span class="keyword">assert</span> add(<span class="number">1</span>, <span class="number">2</span>) == <span class="number">3</span></span><br><span class="line">    <span class="keyword">assert</span> add(-<span class="number">1</span>, <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line">    <span class="keyword">assert</span> add(<span class="number">0</span>, <span class="number">0</span>) == <span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Running Your Tests<br>To run your tests, open your terminal, navigate to the directory containing your test_calculator.py file, and execute:</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pytest</span><br></pre></td></tr></table></figure></li>
</ol>
<p>You should see output indicating whether your tests passed or failed.</p>
<ol start="3">
<li>Writing More Tests<br>As your codebase grows, you’ll want to write more tests. Here are some tips:<ul>
<li><p>Test Functions: Each test should be a standalone function prefixed with test_.</p>
</li>
<li><p>Fixtures: Use fixtures to set up any necessary state or dependencies for your tests.</p>
<p>  Example of Using Fixtures</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> calculator <span class="keyword">import</span> add</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">numbers</span>():</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_add</span>(<span class="params">numbers</span>):</span><br><span class="line">    a, b = numbers</span><br><span class="line">    <span class="keyword">assert</span> add(a, b) == <span class="number">15</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h3 id="Best-Practices-for-Unit-Testing-with-Pytest"><a href="#Best-Practices-for-Unit-Testing-with-Pytest" class="headerlink" title="Best Practices for Unit Testing with Pytest"></a>Best Practices for Unit Testing with Pytest</h3><ul>
<li>Keep Tests Isolated: Each test should be independent of others.</li>
<li>Name Your Tests Clearly: Use descriptive names for your test functions.</li>
<li>Run Tests Frequently: Integrate running tests into your development workflow.</li>
<li>Use Plugins: Explore pytest plugins for additional functionality.</li>
</ul>
<h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Unit testing is a powerful tool that helps maintain code quality. By following this guide and using pytest, you can start writing your own unit tests in Python, ensuring that your code is reliable and easier to maintain.</p>
]]></content>
      <categories>
        <category>Pytest</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pytest</tag>
        <tag>tests</tag>
        <tag>unit tests</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytest Fixture</title>
    <url>/Pytest/Pytest-Fixture/</url>
    <content><![CDATA[<h1 id="Understanding-Pytest-Fixtures-A-Comprehensive-Guide"><a href="#Understanding-Pytest-Fixtures-A-Comprehensive-Guide" class="headerlink" title="Understanding Pytest Fixtures: A Comprehensive Guide"></a>Understanding Pytest Fixtures: A Comprehensive Guide</h1><h2 id="What-is-a-Fixture"><a href="#What-is-a-Fixture" class="headerlink" title="What is a Fixture?"></a>What is a Fixture?</h2><p>A fixture in <code>pytest</code> is a function that sets up some context or state for your tests. It allows you to create reusable test setups, reducing code duplication and improving test clarity. Fixtures can manage resources like database connections, file handles, or any other setup needed for your tests.</p>
<h2 id="Defining-Fixtures"><a href="#Defining-Fixtures" class="headerlink" title="Defining Fixtures"></a>Defining Fixtures</h2><p>To define a fixture, use the <code>@pytest.fixture</code> decorator. Here’s a simple example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sample_data</span>():</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<h2 id="Using-Fixtures-in-Tests"><a href="#Using-Fixtures-in-Tests" class="headerlink" title="Using Fixtures in Tests"></a>Using Fixtures in Tests</h2><p>You can use a fixture by including it as an argument in your test function:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test_sum</span>(<span class="params">sample_data</span>):</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">sum</span>(sample_data) == <span class="number">15</span></span><br></pre></td></tr></table></figure>

<h2 id="Fixture-Scope"><a href="#Fixture-Scope" class="headerlink" title="Fixture Scope"></a>Fixture Scope</h2><p>Fixtures can have different scopes that determine how often they are invoked:</p>
<ul>
<li>function: Each function or method is called.</li>
<li>class: Each class is called once; a class can have multiple methods.</li>
<li>module: Each .py file is called once; the file contains multiple functions and classes.</li>
<li>session: Multiple files are called once, can be called across .py files; each .py file is a module.</li>
</ul>
<ol>
<li><p>Function Scope (Default)<br>This is the default scope. The fixture is invoked for each test function that uses it.</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nGetting username&quot;</span>)</span><br><span class="line">    a = <span class="string">&quot;carterlin&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;function&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">second</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nGetting password&quot;</span>)</span><br><span class="line">    b = <span class="string">&quot;123456&quot;</span></span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>(<span class="params">first</span>):</span><br><span class="line">    <span class="string">&quot;Passing fixture to test case&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Testing account: %s&quot;</span> % first)</span><br><span class="line">    <span class="keyword">assert</span> first == <span class="string">&quot;carterlin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_2</span>(<span class="params">second</span>):</span><br><span class="line">    <span class="string">&quot;Passing fixture to test case&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Testing password: %s&quot;</span> % second)</span><br><span class="line">    <span class="keyword">assert</span> second == <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> Output:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">==================================== 2 passed in 0.00s ====================================</span><br><span class="line">&gt; pytest pytest-fixture-function.py -s -v</span><br><span class="line">pytest-fixture-function.py::test_1 </span><br><span class="line">Getting username</span><br><span class="line">Testing account: carterlin</span><br><span class="line">PASSED</span><br><span class="line">pytest-fixture-function.py::test_2 </span><br><span class="line">Getting password</span><br><span class="line">Testing password: 123456</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure>
</li>
<li><p>Class Scope<br>When the fixture is at the class level, if multiple test cases in a class call this fixture, then this fixture is executed only once before all the test cases in that class start.</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;class&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nGet username, scope is class level and only runs once&quot;</span>)</span><br><span class="line">    a = <span class="string">&quot;carterlin&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCase</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_1</span>(<span class="params">self, first</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;Passing fixture to test case&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Test account: %s&quot;</span> % first)</span><br><span class="line">        <span class="keyword">assert</span> first == <span class="string">&quot;carterlin&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_2</span>(<span class="params">self, first</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;Passing fixture to test case&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Test account: %s&quot;</span> % first)</span><br><span class="line">        <span class="keyword">assert</span> first == <span class="string">&quot;carterlin&quot;</span></span><br></pre></td></tr></table></figure>
<p> Output:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; pytest pytest-fixture-class.py -s -v                                                                       </span><br><span class="line">pytest-fixture-class.py::TestCase::test_1 </span><br><span class="line">Get username, scope is class level and only runs once</span><br><span class="line">Test account: carterlin</span><br><span class="line">PASSED</span><br><span class="line">pytest-fixture-class.py::TestCase::test_2 Test account: carterlin</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure>
</li>
<li><p>Module Scope<br>When the fixture is at the module level, it only runs once before all tests in the current .py script start.</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&#x27;module&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">module_fixture</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Setting up module fixture&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Tearing down module fixture&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_one</span>(<span class="params">module_fixture</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Running test_one&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_two</span>(<span class="params">module_fixture</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Running test_two&quot;</span>)</span><br></pre></td></tr></table></figure>
<p> Output:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Setting up module fixture</span><br><span class="line">Running test_one</span><br><span class="line">Running test_two</span><br><span class="line">Tearing down module fixture</span><br></pre></td></tr></table></figure>
</li>
<li><p>Session Scope<br>A session-scoped fixture can be used across multiple .py modules. If several test cases only need to call the fixture once, set it in the conftest.py file. This file is automatically recognized by pytest. Placing it in the project root allows global access, while placing it in a specific package limits its use to that package.</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conftest.py</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;session&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">first</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nGetting username, the session scope runs only once across multiple .py modules&quot;</span>)</span><br><span class="line">    username = <span class="string">&quot;carterlin&quot;</span></span><br><span class="line">    <span class="keyword">return</span> username</span><br></pre></td></tr></table></figure>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#test-fixture-1.py</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>(<span class="params">first</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Test account: <span class="subst">&#123;first&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> first == <span class="string">&quot;carterlin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#test-fixture-2.py</span></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_1</span>(<span class="params">first</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Test Account: <span class="subst">&#123;first&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> first == <span class="string">&quot;carterlin&quot;</span></span><br></pre></td></tr></table></figure>
<p> Output:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; pytest test-fixture-1.py test-fixture-2.py -s -v</span><br><span class="line">=================================== test session starts ===================================</span><br><span class="line">platform darwin -- Python 3.11.6, pytest-8.3.2, pluggy-1.5.0 -- /opt/homebrew/opt/python@3.11/bin/python3.11</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">rootdir: /Users/carter/hello-python-test/pytest-fixture-demo/pytest-session</span><br><span class="line">plugins: anyio-3.7.1</span><br><span class="line">collected 2 items                                                                         </span><br><span class="line"></span><br><span class="line">test-fixture-1.py::test_1 </span><br><span class="line">Getting username, the session scope runs only once across multiple .py modules</span><br><span class="line">Test account: carterlin</span><br><span class="line">PASSED</span><br><span class="line">test-fixture-2.py::test_1 Test Account: carterlin</span><br><span class="line">PASSED</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="Yielding-Fixtures"><a href="#Yielding-Fixtures" class="headerlink" title="Yielding Fixtures"></a>Yielding Fixtures</h3><p>Using yield in fixtures allows you to separate setup and teardown logic. Code before yield runs before the test, and code after runs after:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">resource</span>():</span><br><span class="line">    res = create_resource()</span><br><span class="line">    <span class="keyword">yield</span> res</span><br><span class="line">    res.cleanup()</span><br></pre></td></tr></table></figure>

<h3 id="Parameterized-Fixtures"><a href="#Parameterized-Fixtures" class="headerlink" title="Parameterized Fixtures"></a>Parameterized Fixtures</h3><p>Parameterized fixtures allow you to run a test with multiple sets of data:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture(<span class="params">params=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">param_fixture</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> request.param</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_parameterized</span>(<span class="params">param_fixture</span>):</span><br><span class="line">    <span class="keyword">assert</span> param_fixture <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Autouse-Fixtures"><a href="#Autouse-Fixtures" class="headerlink" title="Autouse Fixtures"></a>Autouse Fixtures</h3><p>If you want a fixture to be automatically used by tests without explicitly including it, set autouse&#x3D;True:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@pytest.fixture(<span class="params">autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setup_environment</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Setting up environment&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Tearing down environment&quot;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Best-Practices-for-Using-Fixtures"><a href="#Best-Practices-for-Using-Fixtures" class="headerlink" title="Best Practices for Using Fixtures"></a>Best Practices for Using Fixtures</h2><ol>
<li><strong>Keep Fixtures Focused</strong>: Each fixture should handle a specific setup. This makes them easier to understand and reuse.</li>
<li><strong>Use Descriptive Names</strong>: Name your fixtures clearly to indicate their purpose.</li>
<li><strong>Avoid Global State</strong>: Ensure your fixtures do not rely on or modify global state to prevent side effects in tests.</li>
<li><strong>Combine Fixtures</strong>: You can use multiple fixtures in a single test by including them as parameters.</li>
</ol>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Fixtures are an essential feature in <code>pytest</code> that can greatly enhance your testing strategy. By leveraging fixtures, you can write cleaner, more maintainable tests while reducing redundancy. For further exploration, refer to the <a href="https://docs.pytest.org/en/stable/">official pytest documentation</a>.</p>
]]></content>
      <categories>
        <category>Pytest</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pytest</tag>
        <tag>fixtures</tag>
      </tags>
  </entry>
</search>
